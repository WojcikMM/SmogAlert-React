{"version":3,"sources":["const.ts","store/actions.ts","clients/location-api.client.ts","clients/air-index.client.ts","clients/index.ts","clients/dtos/index.ts","clients/stations.client.ts","store/mainReducer.ts","store/store.ts","components/header/header.tsx","components/stations-selector/stations-selector.tsx","components/air-index-description/air-index-description.tsx","components/air-index-preview/air-index-preview.tsx","components/air-index-preview/air-index-preview.mapper.ts","app.tsx","serviceWorker.ts","index.tsx"],"names":["CONST","LOCAL_STORAGE_KEYS","SELECTED_STATION_ID","STATIONS_ARRAY","API_URLS","GET_STATIONS","GET_AIR_INDEX","DEFAULTS","INDEX_LEVEL","LABELS","PREVIEW","INDEXES","NO2","C6H6","CO","O3","PM10","PM25","SO","ST","FETCH_STATIONS_START","FETCH_STATIONS_SUCCESS","FETCH_STATIONS_FAIL","FETCH_STATIONS_FROM_CACHE","FETCH_AIR_INDEX_START","FETCH_AIR_INDEX_SUCCESS","FETCH_AIR_INDEX_FAILS","createFetchStationsStartAction","type","createFetchStationsSuccessAction","stations","createFetchStationsFromCacheAction","createFetchStationsFailAction","cause","createFetchAirIndexStartAction","selectedStationId","createFetchAirIndexSuccessAction","airIndex","createFetchAirIndexFailAction","getActualLocation","dispatch","localStorageStationId","localStorage","getItem","navigator","geolocation","getCurrentPosition","position","closestStation","targetLocation","locationDistance","actualPosition","stationDto","dx","dy","Math","sqrt","vectorDistance","coords","latitude","gegrLat","longitude","gegrLon","reduce","prev","curr","closestLocation","fetchAirIndex","id","fetchFromLocalStorage","stationId","setItem","toString","fetch","then","result","json","airIndexDto","catch","err","Error","compare","next","prevValue","stationName","toLowerCase","nextValue","fetchStations","stationsDto","JSON","parse","sort","orderedStationsDto","stringify","initialState","loadingStations","loadingAirIndex","airIndexModel","rootReducers","combineReducers","localize","localizeReducer","main","state","action","console","log","warn","store","createStore","compose","applyMiddleware","thunkMiddleware","Header","this","props","subHeader","href","target","React","Component","connect","getTranslate","StationsSelector","labelId","Fragment","InputLabel","label","Select","className","value","onChange","handleStationChange","MenuItem","disabled","map","option","key","event","AirIndexDescription","undefined","indexId","Rating","readOnly","noDataLabel","AirIndexPreview","Card","CardHeader","title","translations","summaryId","CardContent","Table","TableHead","TableRow","TableCell","tableColumns","align","TableBody","indexes","airIndexPreviewLevel","translate","c6h6IndexLevel","date","c6h6SourceDataDate","coIndexLevel","coSourceDataDate","no2IndexLevel","no2SourceDataDate","o3IndexLevel","o3SourceDataDate","pm10IndexLevel","pm10SourceDataDate","pm25IndexLevel","pm25SourceDataDate","so2IndexLevel","so2SourceDataDate","stIndexLevel","summaryDate","stSourceDataDate","App","defaultTranslations","languages","translation","options","renderToStaticMarkup","initialize","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.8f9a71bb.chunk.js","sourcesContent":["export const CONST = {\r\n    LOCAL_STORAGE_KEYS: {\r\n        SELECTED_STATION_ID: 'SELECTED_STATION_ID',\r\n        STATIONS_ARRAY: 'STATIONS_ARRAY'\r\n    },\r\n    API_URLS: {\r\n        GET_STATIONS: 'https://cors-anywhere.herokuapp.com/api.gios.gov.pl/pjp-api/rest/station/findAll',\r\n        GET_AIR_INDEX: 'https://cors-anywhere.herokuapp.com/api.gios.gov.pl/pjp-api/rest/aqindex/getIndex'\r\n    },\r\n    DEFAULTS: {\r\n        INDEX_LEVEL: 3\r\n    },\r\n    LABELS: {\r\n        PREVIEW: {\r\n            INDEXES: {\r\n                NO2: 'NO2',\r\n                C6H6: 'C6H6',\r\n                CO: 'CO',\r\n                O3: 'O3',\r\n                PM10: 'PM 10',\r\n                PM25: 'PM 2.5',\r\n                SO: 'SO',\r\n                ST: 'Summary'\r\n            }\r\n        }\r\n    }\r\n}\r\n","import {AirIndexDto, StationDto} from \"../clients\";\r\n\r\n// STATIONS - ACTION TYPES\r\n\r\nexport const FETCH_STATIONS_START = 'FETCH_STATIONS_START';\r\nexport const FETCH_STATIONS_SUCCESS = 'FETCH_STATIONS_SUCCESS';\r\nexport const FETCH_STATIONS_FAIL = 'FETCH_STATIONS_FAIL';\r\nexport const FETCH_STATIONS_FROM_CACHE = 'FETCH_STATIONS_FROM_CACHE';\r\n\r\n// AIR INDEX - ACTION TYPES\r\n\r\nexport const FETCH_AIR_INDEX_START = 'FETCH_AIR_INDEX_START';\r\nexport const FETCH_AIR_INDEX_SUCCESS = 'FETCH_AIR_INDEX_SUCCESS';\r\nexport const FETCH_AIR_INDEX_FAILS = 'FETCH_AIR_INDEX_FAILS';\r\n\r\n// LOCATIONS API\r\n\r\nexport const LOCATION_CHANGED = 'LOCATION_CHANGED';\r\n\r\n// STATIONS - action creators\r\n\r\n/**\r\n * Action creator of 'FETCH_STATIONS_START'\r\n */\r\nexport const createFetchStationsStartAction = () => {\r\n    return {\r\n        type: FETCH_STATIONS_START\r\n    };\r\n}\r\n\r\n/**\r\n * Action creator of 'FETCH_STATIONS_SUCCESS'\r\n * @param stations\r\n */\r\nexport const createFetchStationsSuccessAction = (stations: StationDto[]) => {\r\n    return {\r\n        type: FETCH_STATIONS_SUCCESS,\r\n        stations: stations\r\n    }\r\n}\r\n\r\nexport const createFetchStationsFromCacheAction = (stations: StationDto[]) => {\r\n    return {\r\n        type: FETCH_STATIONS_FROM_CACHE,\r\n        stations: stations\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Action creator of 'FETCH_STATIONS_FAIL'\r\n * @param cause\r\n */\r\nexport const createFetchStationsFailAction = (cause: Error) => {\r\n    return {\r\n        type: FETCH_STATIONS_FAIL,\r\n        cause\r\n    }\r\n}\r\n\r\n// AIR INDEX - action creators\r\n\r\n/**\r\n * Action creator of 'FETCH_AIR_INDEX_START'\r\n * @param selectedStationId\r\n */\r\nexport const createFetchAirIndexStartAction = (selectedStationId: number) => {\r\n    return {\r\n        type: FETCH_AIR_INDEX_START,\r\n        selectedStationId\r\n    }\r\n}\r\n\r\n/**\r\n * Action creator of\r\n * @param airIndex\r\n */\r\nexport const createFetchAirIndexSuccessAction = (airIndex: AirIndexDto) => {\r\n    return {\r\n        type: FETCH_AIR_INDEX_SUCCESS,\r\n        airIndex\r\n    }\r\n}\r\n\r\n/**\r\n * Action creator of 'FETCH_AIR_INDEX_FAILS'\r\n * @param cause\r\n */\r\nexport const createFetchAirIndexFailAction = (cause: Error) => {\r\n    return {\r\n        type: FETCH_AIR_INDEX_FAILS,\r\n        cause\r\n    }\r\n}\r\n\r\n// LOCATION API\r\n\r\n/**\r\n * Action creator of  'LOCATION_CHANGED'\r\n * @param latitude\r\n * @param longitude\r\n */\r\nexport const createLocationChangedAction = (latitude: number, longitude: number) => {\r\n    return {\r\n        type: LOCATION_CHANGED,\r\n        latitude,\r\n        longitude\r\n    }\r\n}\r\n","import {StationDto} from \"./dtos\";\r\nimport {CONST} from \"../const\";\r\nimport {fetchAirIndex} from \"./air-index.client\";\r\n\r\nexport const getActualLocation = (dispatch: any, stations: StationDto[]) => {\r\n    const localStorageStationId = +(localStorage.getItem(CONST.LOCAL_STORAGE_KEYS.SELECTED_STATION_ID) || '');\r\n\r\n    if (navigator.geolocation) {\r\n        navigator.geolocation.getCurrentPosition((position: Position) => {\r\n           const closestStation =  closestLocation(position, stations);\r\n           fetchAirIndex(closestStation.id)(dispatch)\r\n        }, () => {\r\n            fetchFromLocalStorage(dispatch);\r\n        });\r\n    } else if (localStorageStationId) {\r\n        fetchFromLocalStorage(dispatch);\r\n    }\r\n}\r\n\r\nfunction fetchFromLocalStorage(dispatch: any){\r\n    const localStorageStationId = +(localStorage.getItem(CONST.LOCAL_STORAGE_KEYS.SELECTED_STATION_ID) || '');\r\n    if(localStorageStationId){\r\n        fetchAirIndex(localStorageStationId)(dispatch);\r\n    }\r\n}\r\n\r\nfunction closestLocation(targetLocation: Position, stations: StationDto[]) {\r\n    function vectorDistance(dx: number, dy: number) {\r\n        return Math.sqrt(dx * dx + dy * dy);\r\n    }\r\n\r\n\r\n    function locationDistance(actualPosition: Position, stationDto: StationDto) {\r\n        const dx = actualPosition.coords.latitude - stationDto.gegrLat;\r\n        const dy = actualPosition.coords.longitude - stationDto.gegrLon;\r\n\r\n        return vectorDistance(dx, dy);\r\n    }\r\n\r\n    return stations.reduce(function (prev: StationDto, curr: StationDto) {\r\n\r\n        const prevDistance = locationDistance(targetLocation, prev);\r\n        const currDistance = locationDistance(targetLocation, curr);\r\n        return (prevDistance < currDistance) ? prev : curr;\r\n    });\r\n}\r\n","import {\r\n    createFetchAirIndexFailAction,\r\n    createFetchAirIndexStartAction,\r\n    createFetchAirIndexSuccessAction\r\n} from \"../store/actions\";\r\nimport {CONST} from \"../const\";\r\nimport {AirIndexDto} from \"./dtos\";\r\n\r\nexport const fetchAirIndex = (stationId: number) => {\r\n    return ((dispatch: any) => {\r\n        if (!stationId) {\r\n            dispatch(createFetchAirIndexFailAction(new Error('Invalid stationId.')));\r\n        } else {\r\n            localStorage.setItem(CONST.LOCAL_STORAGE_KEYS.SELECTED_STATION_ID, stationId.toString());\r\n            dispatch(createFetchAirIndexStartAction(stationId));\r\n            return fetch(`${CONST.API_URLS.GET_AIR_INDEX}/${stationId}`)\r\n                .then((result: any) => result.json())\r\n                .then((airIndexDto: AirIndexDto) => {\r\n                    return dispatch(createFetchAirIndexSuccessAction(airIndexDto))\r\n                })\r\n                .catch(err => {\r\n                    return dispatch(createFetchAirIndexFailAction(err))\r\n                })\r\n        }\r\n    })\r\n}\r\n","export * from './dtos';\r\nexport * from './stations.client';\r\nexport * from './air-index.client';\r\nexport * from './location-api.client';\r\n","export * from './station.dto';\r\nexport * from './air-index.dto'\r\n","import { StationDto } from \"./dtos\";\r\nimport {\r\n    createFetchStationsFailAction,\r\n    createFetchStationsStartAction,\r\n    createFetchStationsSuccessAction,\r\n    createFetchStationsFromCacheAction\r\n} from \"../store/actions\";\r\nimport {CONST} from \"../const\";\r\nimport { getActualLocation } from \"./location-api.client\";\r\n\r\nconst compare = (prev: StationDto, next: StationDto) => {\r\n    const prevValue = prev.stationName.toLowerCase();\r\n    const nextValue = next.stationName.toLowerCase();\r\n\r\n    return prevValue > nextValue ? 1 : prevValue < nextValue ? -1 : 0;\r\n}\r\n\r\nexport const fetchStations = () => {\r\n    return ((dispatch: any) => {\r\n\r\n\r\n        if (localStorage.getItem(CONST.LOCAL_STORAGE_KEYS.STATIONS_ARRAY) !== null) {\r\n            const stationsDto = JSON.parse(localStorage.getItem(CONST.LOCAL_STORAGE_KEYS.STATIONS_ARRAY) || '[]');\r\n            dispatch(createFetchStationsFromCacheAction(stationsDto));\r\n            getActualLocation(dispatch, stationsDto);\r\n\r\n        } else {\r\n            dispatch(createFetchStationsStartAction());\r\n            fetch(CONST.API_URLS.GET_STATIONS)\r\n                .then((result: any) => result.json())\r\n                .then((stationsDto: StationDto[]) => stationsDto.sort(compare))\r\n                .then((orderedStationsDto: StationDto[]) => {\r\n                    localStorage.setItem(CONST.LOCAL_STORAGE_KEYS.STATIONS_ARRAY, JSON.stringify(orderedStationsDto));\r\n                    dispatch(createFetchStationsSuccessAction(orderedStationsDto));\r\n                    getActualLocation(dispatch, orderedStationsDto);\r\n                    return orderedStationsDto;\r\n                })\r\n                .catch(err => dispatch(createFetchStationsFailAction(err)));\r\n        }\r\n    });\r\n};\r\n","import {\r\n    FETCH_STATIONS_START,\r\n    FETCH_STATIONS_FAIL,\r\n    FETCH_STATIONS_SUCCESS,\r\n    FETCH_AIR_INDEX_START,\r\n    FETCH_STATIONS_FROM_CACHE,\r\n    FETCH_AIR_INDEX_SUCCESS, FETCH_AIR_INDEX_FAILS\r\n} from './actions';\r\nimport {\r\n    StationDto,\r\n    AirIndexDto\r\n} from \"../clients/dtos\";\r\n\r\nexport interface MainState {\r\n    loadingStations: boolean;\r\n    loadingAirIndex: boolean;\r\n\r\n    stations: StationDto[];\r\n    selectedStationId: number;\r\n\r\n    airIndexModel: AirIndexDto | null;\r\n}\r\n\r\nconst initialState: MainState = {\r\n    loadingStations: false,\r\n    loadingAirIndex: false,\r\n    stations: [] as StationDto[],\r\n    selectedStationId: 0,\r\n    airIndexModel: null\r\n};\r\n\r\nexport const mainReducer = (state = initialState, action: any) => {\r\n    console.log('Action received: ', action.type);\r\n    switch (action.type) {\r\n        case FETCH_STATIONS_START:\r\n            return {\r\n                ...state,\r\n                loadingStations: true\r\n            } as MainState;\r\n        case FETCH_STATIONS_FROM_CACHE:\r\n        case FETCH_STATIONS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loadingStations: false,\r\n                stations: action.stations\r\n            } as MainState;\r\n        case FETCH_STATIONS_FAIL:\r\n            return {\r\n                ...state,\r\n                loadingStations: false,\r\n                stations: []\r\n            } as MainState;\r\n        case FETCH_AIR_INDEX_START:\r\n            return {\r\n                ...state,\r\n                selectedStationId: action.selectedStationId,\r\n                loadingAirIndex: true\r\n            } as MainState\r\n        case FETCH_AIR_INDEX_SUCCESS:\r\n            return {\r\n                ...state,\r\n                airIndexModel: action.airIndex,\r\n                loadingAirIndex: false\r\n            } as MainState\r\n        case FETCH_AIR_INDEX_FAILS:\r\n            return {\r\n                ...state,\r\n                loadingAirIndex: false,\r\n                selectedStationId: 0\r\n            }\r\n        default:\r\n            console.warn(`There is no handler for event: ${action.type}`);\r\n            return state;\r\n    }\r\n};\r\n","import {applyMiddleware, createStore, compose, combineReducers} from \"redux\";\r\nimport {mainReducer} from \"./mainReducer\";\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport {localizeReducer} from \"react-localize-redux\";\r\n\r\nconst rootReducers = combineReducers({\r\n    localize: localizeReducer,\r\n    main: mainReducer\r\n})\r\n\r\nexport const store = createStore(\r\n    rootReducers,\r\n    compose(\r\n    applyMiddleware(thunkMiddleware)\r\n    //,(window as any).__REDUX_DEVTOOLS_EXTENSION__ && (window as any).__REDUX_DEVTOOLS_EXTENSION__()\r\n    )\r\n);\r\n//applyMiddleware(thunkMiddleware,\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {StoreModel} from \"../../store/store.model\";\r\nimport {getTranslate} from \"react-localize-redux\";\r\nimport {HeaderProps} from \"./headerProps\";\r\n\r\nclass Header extends React.Component<HeaderProps, any> {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Smog Alert</h1>\r\n                <p>{this.props.subHeader}</p>\r\n\r\n                <h4>If no data loaded please click\r\n                    <a href=\"https://cors-anywhere.herokuapp.com\" target=\"_blank\">here</a>\r\n                    and enable gateway for demo</h4>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: StoreModel) => {\r\n    return {\r\n        subHeader: getTranslate(state.localize)('subHeader')\r\n    } as HeaderProps;\r\n}\r\n\r\nexport default connect(mapStateToProps)(Header);\r\n","import {connect} from \"react-redux\";\r\nimport React, {ChangeEvent} from \"react\";\r\nimport {StationDto} from \"../../clients/dtos\";\r\nimport {fetchAirIndex, fetchStations} from \"../../clients\";\r\nimport './stations-selector.scss';\r\nimport {InputLabel, MenuItem, Select} from \"@material-ui/core\";\r\nimport {StoreModel} from \"../../store/store.model\";\r\nimport {getTranslate} from \"react-localize-redux\";\r\nimport {StationsSelectorProps} from \"./stations-selector-props\";\r\n\r\n\r\nclass StationsSelector extends React.Component<StationsSelectorProps, any> {\r\n\r\n    private readonly labelId = 'stations-selector-label';\r\n\r\n    componentDidMount() {\r\n        this.props.fetchStations();\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <InputLabel id={this.labelId}>{this.props.label}</InputLabel>\r\n                <Select label={this.labelId}\r\n                        className=\"stations-selector\"\r\n                        value={this.props.selectedStationId}\r\n                        onChange={this.props.handleStationChange}>\r\n                    <MenuItem disabled={true} value=\"0\"/>\r\n                    {this.props.stations.map((option: StationDto) =>\r\n                        (<MenuItem key={option.id} value={option.id}>{option.stationName}</MenuItem>)\r\n                    )}\r\n                </Select>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: StoreModel) => {\r\n    return {\r\n        stations: state.main.stations,\r\n        selectedStationId: state.main.selectedStationId,\r\n        label: getTranslate(state.localize)('stationsSelectorLabel')\r\n    } as StationsSelectorProps;\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n    return {\r\n        fetchStations: (): void => dispatch(fetchStations()),\r\n        handleStationChange: (event: ChangeEvent<{ name?: string | undefined; value: unknown; }>) => dispatch(fetchAirIndex(event.target.value as number))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(StationsSelector);\r\n","import React from \"react\";\r\nimport {AirIndexDescriptionProps} from \"./air-index-description-props\";\r\nimport {Rating} from '@material-ui/lab';\r\n\r\n\r\nexport class AirIndexDescription extends React.Component<AirIndexDescriptionProps, any> {\r\n    render() {\r\n        return (\r\n            <span>\r\n                {this.props.indexId !== undefined ?\r\n                    <Rating value={ 5 - this.props.indexId} readOnly/> :\r\n                    <div>{this.props.noDataLabel}</div>\r\n                }\r\n            </span>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {mapStateToProps} from \"./air-index-preview.mapper\";\r\nimport {AirIndexPreviewLevel, AirIndexPreviewProps} from \"./air-index-preview.props\";\r\nimport {Card, TableCell, CardHeader, Table, TableBody, TableHead, TableRow, CardContent} from \"@material-ui/core\";\r\nimport './air-index-preview.scss';\r\nimport {AirIndexDescription} from \"../air-index-description/air-index-description\";\r\n\r\n\r\nclass AirIndexPreview extends React.Component<AirIndexPreviewProps, any> {\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Card>\r\n                    <CardHeader\r\n                        title={\r\n                            <React.Fragment>\r\n                                <span\r\n                                    className=\"air-index-preview__summary-title\">{this.props.translations.title}</span>\r\n                                <AirIndexDescription noDataLabel={this.props.translations.noDataLabel} indexId={this.props.summaryId}/>\r\n                            </React.Fragment>}>\r\n                    </CardHeader>\r\n                    <CardContent>\r\n                        <div className=\"air-index-preview__sub-header\">Details:</div>\r\n                        <Table>\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>{this.props.translations.tableColumns.type}</TableCell>\r\n                                    <TableCell align=\"right\">{this.props.translations.tableColumns.value}</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {this.props.indexes.map((airIndexPreviewLevel: AirIndexPreviewLevel) => (\r\n                                    <TableRow key={airIndexPreviewLevel.label}>\r\n                                        <TableCell>{airIndexPreviewLevel.label}</TableCell>\r\n                                        <TableCell align=\"right\">\r\n                                            <AirIndexDescription noDataLabel={this.props.translations.noDataLabel} indexId={airIndexPreviewLevel.id}/>\r\n                                        </TableCell>\r\n                                        {/*<TableCell>{airIndexPreviewLevel.date}</TableCell>*/}\r\n                                        {/*   TODO: Add date as (i) with popup */}\r\n                                    </TableRow>)\r\n                                )}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </CardContent>\r\n                </Card>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(AirIndexPreview);\r\n","import {CONST} from \"../../const\";\r\nimport {StoreModel} from \"../../store/store.model\";\r\nimport {AirIndexPreviewProps} from \"./air-index-preview.props\";\r\nimport {getTranslate} from \"react-localize-redux\";\r\n\r\nexport const mapStateToProps = (state: StoreModel) => {\r\n    const translate = getTranslate(state.localize);\r\n    return {\r\n        indexes: [\r\n            {\r\n                id: state.main.airIndexModel?.c6h6IndexLevel?.id,\r\n                date: state.main.airIndexModel?.c6h6SourceDataDate,\r\n                label: CONST.LABELS.PREVIEW.INDEXES.C6H6\r\n            },\r\n            {\r\n                id: state.main.airIndexModel?.coIndexLevel?.id,\r\n                date: state.main.airIndexModel?.coSourceDataDate,\r\n                label: CONST.LABELS.PREVIEW.INDEXES.CO\r\n            },\r\n            {\r\n                id: state.main.airIndexModel?.no2IndexLevel?.id,\r\n                date: state.main.airIndexModel?.no2SourceDataDate,\r\n                label: CONST.LABELS.PREVIEW.INDEXES.NO2\r\n            },\r\n            {\r\n                id: state.main.airIndexModel?.o3IndexLevel?.id,\r\n                date: state.main.airIndexModel?.o3SourceDataDate,\r\n                label: CONST.LABELS.PREVIEW.INDEXES.O3\r\n            },\r\n            {\r\n                id: state.main.airIndexModel?.pm10IndexLevel?.id,\r\n                date: state.main.airIndexModel?.pm10SourceDataDate,\r\n                label: CONST.LABELS.PREVIEW.INDEXES.PM10\r\n            },\r\n            {\r\n                id: state.main.airIndexModel?.pm25IndexLevel?.id,\r\n                date: state.main.airIndexModel?.pm25SourceDataDate,\r\n                label: CONST.LABELS.PREVIEW.INDEXES.PM25\r\n            },\r\n            {\r\n                id: state.main.airIndexModel?.so2IndexLevel?.id,\r\n                date: state.main.airIndexModel?.so2SourceDataDate,\r\n                label: CONST.LABELS.PREVIEW.INDEXES.SO\r\n            }\r\n        ],\r\n        summaryId: state.main.airIndexModel?.stIndexLevel?.id,\r\n        summaryDate: state.main.airIndexModel?.stSourceDataDate,\r\n        translations: {\r\n            title: translate('airIndexPreviewTitle'),\r\n            noDataLabel: translate('airIndexDescriptionNoData'),\r\n            tableColumns: {\r\n                type: translate('airIndexPreviewTableColumnType'),\r\n                value: translate('airIndexPreviewTableColumnValue'),\r\n                date: translate('airIndexPreviewTableColumnDate')\r\n            }\r\n        }\r\n    } as AirIndexPreviewProps;\r\n}\r\n","import React from 'react';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from \"./store/store\";\r\nimport './app.scss';\r\nimport {InitializePayload, LocalizeProvider} from \"react-localize-redux\";\r\nimport {languages, translation} from './translations.json';\r\nimport Header from \"./components/header/header\";\r\nimport StationsSelector from \"./components/stations-selector/stations-selector\";\r\nimport AirIndexPreview from \"./components/air-index-preview/air-index-preview\";\r\n\r\nclass App extends React.Component<any, any> {\r\n\r\n    defaultTranslations = {\r\n        languages,\r\n        translation,\r\n        options: {\r\n            renderToStaticMarkup: false\r\n        }\r\n    } as InitializePayload;\r\n\r\n    render() {\r\n        return (\r\n            <Provider store={store}>\r\n                <LocalizeProvider store={store} initialize={this.defaultTranslations}>\r\n                    <Header/>\r\n                    <StationsSelector/>\r\n                    <AirIndexPreview/>\r\n                </LocalizeProvider>\r\n            </Provider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './app';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}